Django applications :
	generic : A  demo of how the final infrastructure going to be. It produces the same result as : http://lhcb-release-area.web.cern.ch/LHCb-release-area/DOC/gauss/generator/validation/index.html
				example output : http://lhcb-release-area.web.cern.ch/LHCb-release-area/DOC/gauss/generator/validation/Gauss_30000000_v39r0_v37r8_Pythia_6.424_6.418/page.html
				
Other folders:
		static : folders to save the static files (images,css files etc), apache will use this folder to serve the static files

 		templates : contains the templates which the apps return as HttpResponses to the user
		

	(more documentation will come soon with a more stable and representative version of LHCbPR)
	
**New stuff added
	The basic django app now is the lhcbPR , the folder handlers contains the handlers each of them parse a specific result-output from a job
	depending on a jobdescription id. at the moment in the database there are 2 jobdescriptions : 
		(primary_id=1) Brunel v42r0p1
		(primary_id=2) Gauss v42r1
		
	The python file which calls the right handler is the collectRunResults inside the django_apps folder.
	
	Also in the folder scripting i have the scripts i used to run some jobs and feed them to the lhcbPR.
		runJob : runs  Brunel v42r0p1
		runJobLoop : runs Brunel v42r0p1 in a loop the user provides , ex ./runJobLoop 30 <--- this will run 30 times the Brunel 
			and it will insert the data inside the database(the one i use for testing)
		runJob2 : runs Gauss v41r1 and creates a json format with the data(the user must give a log file and a root file from a job)
	
	In the folder lhcbPR/management/commands there the management command of the lhcbPR application
	in order to run a command the user must do : python manage.py name_of_command(ex average) [args...]

	the so far command are:
		hand : python manager.py hand jobDescription_id name_of_handler <--- that way you create a new record in the database which 
			maps a handler to a jobDescription
		
		handdel : (takes no args , just deletes the current mapping handlers--jobDescription_id
		
		getHandler : user provides a jobDescription_id and this command the right handler name depending on the id.
		
		jobDes : just creates two simple for moment jobDescription (Brunel + Gauss)
		
		jobDesdel : deletes all the records of the JobDescription,Options,Application tables
		
		pushToDB : it takes a json file and pushes the data of the file inside the database
		
		(the other commands remain for the sake of generic(the older demo) app functionality, they are not needed in the lhcbPR)
		
		
MORE DOCUMENTATION COMES SOON