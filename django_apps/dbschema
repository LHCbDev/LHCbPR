CREATE TABLE "LHCBPR_HOST" (
    "ID" NUMBER(11) NOT NULL PRIMARY KEY,
    "HOSTNAME" NVARCHAR2(50),
    "CPU_INFO" NVARCHAR2(200),
    "MEMORYINFO" NVARCHAR2(200)
)
;

DECLARE
    i INTEGER;
BEGIN
    SELECT COUNT(*) INTO i FROM USER_CATALOG
        WHERE TABLE_NAME = 'LHCBPR_HOST_SQ' AND TABLE_TYPE = 'SEQUENCE';
    IF i = 0 THEN
        EXECUTE IMMEDIATE 'CREATE SEQUENCE "LHCBPR_HOST_SQ"';
    END IF;
END;
/

CREATE OR REPLACE TRIGGER "LHCBPR_HOST_TR"
BEFORE INSERT ON "LHCBPR_HOST"
FOR EACH ROW
WHEN (new."ID" IS NULL)
    BEGIN
        SELECT "LHCBPR_HOST_SQ".nextval
        INTO :new."ID" FROM dual;
    END;
/
CREATE TABLE "LHCBPR_APPLICATION" (
    "ID" NUMBER(11) NOT NULL PRIMARY KEY,
    "APPNAME" NVARCHAR2(50),
    "APPVERSION" NVARCHAR2(50),
    UNIQUE ("APPNAME", "APPVERSION")
)
;

DECLARE
    i INTEGER;
BEGIN
    SELECT COUNT(*) INTO i FROM USER_CATALOG
        WHERE TABLE_NAME = 'LHCBPR_APPLICATION_SQ' AND TABLE_TYPE = 'SEQUENCE';
    IF i = 0 THEN
        EXECUTE IMMEDIATE 'CREATE SEQUENCE "LHCBPR_APPLICATION_SQ"';
    END IF;
END;
/

CREATE OR REPLACE TRIGGER "LHCBPR_APPLICATION_TR"
BEFORE INSERT ON "LHCBPR_APPLICATION"
FOR EACH ROW
WHEN (new."ID" IS NULL)
    BEGIN
        SELECT "LHCBPR_APPLICATION_SQ".nextval
        INTO :new."ID" FROM dual;
    END;
/
CREATE TABLE "LHCBPR_OPTIONS" (
    "ID" NUMBER(11) NOT NULL PRIMARY KEY,
    "CONTENT" NVARCHAR2(200),
    "DESCRIPTION" NVARCHAR2(300)
)
;

DECLARE
    i INTEGER;
BEGIN
    SELECT COUNT(*) INTO i FROM USER_CATALOG
        WHERE TABLE_NAME = 'LHCBPR_OPTIONS_SQ' AND TABLE_TYPE = 'SEQUENCE';
    IF i = 0 THEN
        EXECUTE IMMEDIATE 'CREATE SEQUENCE "LHCBPR_OPTIONS_SQ"';
    END IF;
END;
/

CREATE OR REPLACE TRIGGER "LHCBPR_OPTIONS_TR"
BEFORE INSERT ON "LHCBPR_OPTIONS"
FOR EACH ROW
WHEN (new."ID" IS NULL)
    BEGIN
        SELECT "LHCBPR_OPTIONS_SQ".nextval
        INTO :new."ID" FROM dual;
    END;
/
CREATE TABLE "LHCBPR_SETUPPROJECT" (
    "ID" NUMBER(11) NOT NULL PRIMARY KEY,
    "CONTENT" NVARCHAR2(200),
    "DESCRIPTION" NVARCHAR2(200)
)
;

DECLARE
    i INTEGER;
BEGIN
    SELECT COUNT(*) INTO i FROM USER_CATALOG
        WHERE TABLE_NAME = 'LHCBPR_SETUPPROJECT_SQ' AND TABLE_TYPE = 'SEQUENCE';
    IF i = 0 THEN
        EXECUTE IMMEDIATE 'CREATE SEQUENCE "LHCBPR_SETUPPROJECT_SQ"';
    END IF;
END;
/

CREATE OR REPLACE TRIGGER "LHCBPR_SETUPPROJECT_TR"
BEFORE INSERT ON "LHCBPR_SETUPPROJECT"
FOR EACH ROW
WHEN (new."ID" IS NULL)
    BEGIN
        SELECT "LHCBPR_SETUPPROJECT_SQ".nextval
        INTO :new."ID" FROM dual;
    END;
/
CREATE TABLE "LHCBPR_JOBDESCRIPTION" (
    "ID" NUMBER(11) NOT NULL PRIMARY KEY,
    "APPLICATION_ID" NUMBER(11) NOT NULL REFERENCES "LHCBPR_APPLICATION" ("ID") DEFERRABLE INITIALLY DEFERRED,
    "OPTIONS_ID" NUMBER(11) REFERENCES "LHCBPR_OPTIONS" ("ID") DEFERRABLE INITIALLY DEFERRED
)
;

DECLARE
    i INTEGER;
BEGIN
    SELECT COUNT(*) INTO i FROM USER_CATALOG
        WHERE TABLE_NAME = 'LHCBPR_JOBDESCRIPTION_SQ' AND TABLE_TYPE = 'SEQUENCE';
    IF i = 0 THEN
        EXECUTE IMMEDIATE 'CREATE SEQUENCE "LHCBPR_JOBDESCRIPTION_SQ"';
    END IF;
END;
/

CREATE OR REPLACE TRIGGER "LHCBPR_JOBDESCRIPTION_TR"
BEFORE INSERT ON "LHCBPR_JOBDESCRIPTION"
FOR EACH ROW
WHEN (new."ID" IS NULL)
    BEGIN
        SELECT "LHCBPR_JOBDESCRIPTION_SQ".nextval
        INTO :new."ID" FROM dual;
    END;
/
CREATE TABLE "LHCBPR_PLATFORM" (
    "ID" NUMBER(11) NOT NULL PRIMARY KEY,
    "CMTCONFIG" NVARCHAR2(100)
)
;

DECLARE
    i INTEGER;
BEGIN
    SELECT COUNT(*) INTO i FROM USER_CATALOG
        WHERE TABLE_NAME = 'LHCBPR_PLATFORM_SQ' AND TABLE_TYPE = 'SEQUENCE';
    IF i = 0 THEN
        EXECUTE IMMEDIATE 'CREATE SEQUENCE "LHCBPR_PLATFORM_SQ"';
    END IF;
END;
/

CREATE OR REPLACE TRIGGER "LHCBPR_PLATFORM_TR"
BEFORE INSERT ON "LHCBPR_PLATFORM"
FOR EACH ROW
WHEN (new."ID" IS NULL)
    BEGIN
        SELECT "LHCBPR_PLATFORM_SQ".nextval
        INTO :new."ID" FROM dual;
    END;
/
CREATE TABLE "LHCBPR_REQUESTEDCMTCONFIG" (
    "ID" NUMBER(11) NOT NULL PRIMARY KEY,
    "JOBDESCRIPTION_ID" NUMBER(11) NOT NULL REFERENCES "LHCBPR_JOBDESCRIPTION" ("ID") DEFERRABLE INITIALLY DEFERRED,
    "CMTCONFIG_ID" NUMBER(11) NOT NULL REFERENCES "LHCBPR_PLATFORM" ("ID") DEFERRABLE INITIALLY DEFERRED
)
;

DECLARE
    i INTEGER;
BEGIN
    SELECT COUNT(*) INTO i FROM USER_CATALOG
        WHERE TABLE_NAME = 'LHCBPR_REQUESTEDCMTCONFIG_SQ' AND TABLE_TYPE = 'SEQUENCE';
    IF i = 0 THEN
        EXECUTE IMMEDIATE 'CREATE SEQUENCE "LHCBPR_REQUESTEDCMTCONFIG_SQ"';
    END IF;
END;
/

CREATE OR REPLACE TRIGGER "LHCBPR_REQUESTEDCMTCONFIG_TR"
BEFORE INSERT ON "LHCBPR_REQUESTEDCMTCONFIG"
FOR EACH ROW
WHEN (new."ID" IS NULL)
    BEGIN
        SELECT "LHCBPR_REQUESTEDCMTCONFIG_SQ".nextval
        INTO :new."ID" FROM dual;
    END;
/
CREATE TABLE "LHCBPR_JOB" (
    "ID" NUMBER(11) NOT NULL PRIMARY KEY,
    "HOST_ID" NUMBER(11) REFERENCES "LHCBPR_HOST" ("ID") DEFERRABLE INITIALLY DEFERRED,
    "JOBDESCRIPTION_ID" NUMBER(11) NOT NULL REFERENCES "LHCBPR_JOBDESCRIPTION" ("ID") DEFERRABLE INITIALLY DEFERRED,
    "PLATFORM_ID" NUMBER(11) REFERENCES "LHCBPR_PLATFORM" ("ID") DEFERRABLE INITIALLY DEFERRED,
    "TIME_START" TIMESTAMP NOT NULL,
    "TIME_END" TIMESTAMP NOT NULL,
    "STATUS" NVARCHAR2(50)
)
;

DECLARE
    i INTEGER;
BEGIN
    SELECT COUNT(*) INTO i FROM USER_CATALOG
        WHERE TABLE_NAME = 'LHCBPR_JOB_SQ' AND TABLE_TYPE = 'SEQUENCE';
    IF i = 0 THEN
        EXECUTE IMMEDIATE 'CREATE SEQUENCE "LHCBPR_JOB_SQ"';
    END IF;
END;
/

CREATE OR REPLACE TRIGGER "LHCBPR_JOB_TR"
BEFORE INSERT ON "LHCBPR_JOB"
FOR EACH ROW
WHEN (new."ID" IS NULL)
    BEGIN
        SELECT "LHCBPR_JOB_SQ".nextval
        INTO :new."ID" FROM dual;
    END;
/
CREATE TABLE "LHCBPR_HANDLER" (
    "ID" NUMBER(11) NOT NULL PRIMARY KEY,
    "NAME" NVARCHAR2(50),
    "DESCRIPTION" NVARCHAR2(200)
)
;

DECLARE
    i INTEGER;
BEGIN
    SELECT COUNT(*) INTO i FROM USER_CATALOG
        WHERE TABLE_NAME = 'LHCBPR_HANDLER_SQ' AND TABLE_TYPE = 'SEQUENCE';
    IF i = 0 THEN
        EXECUTE IMMEDIATE 'CREATE SEQUENCE "LHCBPR_HANDLER_SQ"';
    END IF;
END;
/

CREATE OR REPLACE TRIGGER "LHCBPR_HANDLER_TR"
BEFORE INSERT ON "LHCBPR_HANDLER"
FOR EACH ROW
WHEN (new."ID" IS NULL)
    BEGIN
        SELECT "LHCBPR_HANDLER_SQ".nextval
        INTO :new."ID" FROM dual;
    END;
/
CREATE TABLE "LHCBPR_JOBHANDLER" (
    "ID" NUMBER(11) NOT NULL PRIMARY KEY,
    "JOBDESCRIPTION_ID" NUMBER(11) NOT NULL REFERENCES "LHCBPR_JOBDESCRIPTION" ("ID") DEFERRABLE INITIALLY DEFERRED,
    "HANDLER_ID" NUMBER(11) NOT NULL REFERENCES "LHCBPR_HANDLER" ("ID") DEFERRABLE INITIALLY DEFERRED
)
;

DECLARE
    i INTEGER;
BEGIN
    SELECT COUNT(*) INTO i FROM USER_CATALOG
        WHERE TABLE_NAME = 'LHCBPR_JOBHANDLER_SQ' AND TABLE_TYPE = 'SEQUENCE';
    IF i = 0 THEN
        EXECUTE IMMEDIATE 'CREATE SEQUENCE "LHCBPR_JOBHANDLER_SQ"';
    END IF;
END;
/

CREATE OR REPLACE TRIGGER "LHCBPR_JOBHANDLER_TR"
BEFORE INSERT ON "LHCBPR_JOBHANDLER"
FOR EACH ROW
WHEN (new."ID" IS NULL)
    BEGIN
        SELECT "LHCBPR_JOBHANDLER_SQ".nextval
        INTO :new."ID" FROM dual;
    END;
/
CREATE TABLE "LHCBPR_JOBATTRIBUTE" (
    "ID" NUMBER(11) NOT NULL PRIMARY KEY,
    "NAME" NVARCHAR2(50),
    "TYPE" NVARCHAR2(20),
    "GROUP" NVARCHAR2(50),
    "DESCRIPTION" NVARCHAR2(100)
)
;

DECLARE
    i INTEGER;
BEGIN
    SELECT COUNT(*) INTO i FROM USER_CATALOG
        WHERE TABLE_NAME = 'LHCBPR_JOBATTRIBUTE_SQ' AND TABLE_TYPE = 'SEQUENCE';
    IF i = 0 THEN
        EXECUTE IMMEDIATE 'CREATE SEQUENCE "LHCBPR_JOBATTRIBUTE_SQ"';
    END IF;
END;
/

CREATE OR REPLACE TRIGGER "LHCBPR_JOBATTRIBUTE_TR"
BEFORE INSERT ON "LHCBPR_JOBATTRIBUTE"
FOR EACH ROW
WHEN (new."ID" IS NULL)
    BEGIN
        SELECT "LHCBPR_JOBATTRIBUTE_SQ".nextval
        INTO :new."ID" FROM dual;
    END;
/
CREATE TABLE "LHCBPR_JOBRESULTS" (
    "ID" NUMBER(11) NOT NULL PRIMARY KEY,
    "JOB_ID" NUMBER(11) NOT NULL REFERENCES "LHCBPR_JOB" ("ID") DEFERRABLE INITIALLY DEFERRED,
    "JOBATTRIBUTE_ID" NUMBER(11) NOT NULL REFERENCES "LHCBPR_JOBATTRIBUTE" ("ID") DEFERRABLE INITIALLY DEFERRED
)
;

DECLARE
    i INTEGER;
BEGIN
    SELECT COUNT(*) INTO i FROM USER_CATALOG
        WHERE TABLE_NAME = 'LHCBPR_JOBRESULTS_SQ' AND TABLE_TYPE = 'SEQUENCE';
    IF i = 0 THEN
        EXECUTE IMMEDIATE 'CREATE SEQUENCE "LHCBPR_JOBRESULTS_SQ"';
    END IF;
END;
/

CREATE OR REPLACE TRIGGER "LHCBPR_JOBRESULTS_TR"
BEFORE INSERT ON "LHCBPR_JOBRESULTS"
FOR EACH ROW
WHEN (new."ID" IS NULL)
    BEGIN
        SELECT "LHCBPR_JOBRESULTS_SQ".nextval
        INTO :new."ID" FROM dual;
    END;
/
CREATE TABLE "LHCBPR_RESULTSTRING" (
    "JOBRESULTS_PTR_ID" NUMBER(11) NOT NULL PRIMARY KEY REFERENCES "LHCBPR_JOBRESULTS" ("ID") DEFERRABLE INITIALLY DEFERRED,
    "DATA" NVARCHAR2(100)
)
;
CREATE TABLE "LHCBPR_RESULTFLOAT" (
    "JOBRESULTS_PTR_ID" NUMBER(11) NOT NULL PRIMARY KEY REFERENCES "LHCBPR_JOBRESULTS" ("ID") DEFERRABLE INITIALLY DEFERRED,
    "DATA" DOUBLE PRECISION NOT NULL
)
;
CREATE TABLE "LHCBPR_RESULTINT" (
    "JOBRESULTS_PTR_ID" NUMBER(11) NOT NULL PRIMARY KEY REFERENCES "LHCBPR_JOBRESULTS" ("ID") DEFERRABLE INITIALLY DEFERRED,
    "DATA" NUMBER(11) NOT NULL
)
;
CREATE TABLE "LHCBPR_RESULTBINARY" (
    "JOBRESULTS_PTR_ID" NUMBER(11) NOT NULL PRIMARY KEY REFERENCES "LHCBPR_JOBRESULTS" ("ID") DEFERRABLE INITIALLY DEFERRED,
    "ROOT_VERSION" NVARCHAR2(20),
    "DATA" NCLOB
)
;
CREATE TABLE "LHCBPR_HANDLERRESULT" (
    "ID" NUMBER(11) NOT NULL PRIMARY KEY,
    "JOB_ID" NUMBER(11) NOT NULL REFERENCES "LHCBPR_JOB" ("ID") DEFERRABLE INITIALLY DEFERRED,
    "HANDLER_ID" NUMBER(11) NOT NULL REFERENCES "LHCBPR_HANDLER" ("ID") DEFERRABLE INITIALLY DEFERRED,
    "SUCCESS" NUMBER(1) CHECK ("SUCCESS" IN (0,1)) NOT NULL
)
;

DECLARE
    i INTEGER;
BEGIN
    SELECT COUNT(*) INTO i FROM USER_CATALOG
        WHERE TABLE_NAME = 'LHCBPR_HANDLERRESULT_SQ' AND TABLE_TYPE = 'SEQUENCE';
    IF i = 0 THEN
        EXECUTE IMMEDIATE 'CREATE SEQUENCE "LHCBPR_HANDLERRESULT_SQ"';
    END IF;
END;
/

CREATE OR REPLACE TRIGGER "LHCBPR_HANDLERRESULT_TR"
BEFORE INSERT ON "LHCBPR_HANDLERRESULT"
FOR EACH ROW
WHEN (new."ID" IS NULL)
    BEGIN
        SELECT "LHCBPR_HANDLERRESULT_SQ".nextval
        INTO :new."ID" FROM dual;
    END;
/
COMMIT;
